 algorithm                     program
-are written at           -are written at time
designing time.            of implementation
-guy having domain         -written by programmer
knowledge                   can have domain knowledge
-can be written in         -only programming language
any language(eng.,mathem-   (c,c++,java, etc)
atical notations)  
-hardware and OS indepen-   -hardware and OS dependent
dent     
-analyze the algorithm      -test the program







PRIORI ANALYSIS                    POSTERIORI TESTING
-done over algorithm                  -done over program
-independent of language              -language dependent
-hardware independent                 -hardware dependent
-time&space function(we will          -watch time and bytes(we
come to know how get time and          come to know how much time
space of a algorithm)                  will a program take to run etc)











CHARACTERISTICS OF ALGORITHM
-Input - an algorithm can take 0 or more inputs.
-Putput- an algorithm takes at least one output.
-Definiteness- an algorithm should be given a definite value a real value or write known 
steps
-Finiteness- statement written should be finite
-Effectiveness- statements should be effective or understandable not any unnecessary statement 





analyzing  program
1.we'll get TIME function in how much time a algorithm takes to run
2.how much SPACE does a algorithm stores
3.data consuption /network working i.e. how much data transfer is done
4.power consumption 
5.CPU register it is consuming  



 
writing an algorithm
algorithm swap(a,b)

{                    time       space(variables)
Temp=a;-------------- 1           a->  1 
a=b;----------------- 1           b->  1
b=temp;-------------- 1          temp->1
}                   f(n)=3        s(n)=3 word (we can't use bytes here 
                                           as we don't know what data type it is)

TIME ANALYSIS-
here we suppose every statement takes 1 unit of time then
the over all time function will be f(n)=3 i.e, addition of time 
taken by each and every statement  
 
SPACE ANALYSIS
here we have 3 variables and each variable is taken as one word so the
 space function is also 3 i.e. s(n)=3

constant are represented as order of 1 i.e. O(1) here both time and space 
function are O(1) as no. are always constant either it is 3 or 3000 





FREQUENCY COUNT METHOD

1.)Here we have to find sum of elements in an array


                                   let us take an array of five elements
Algorithm  sum(A,n)                    A= 8,9,5,7,6
{                   TIME                  __________
S=0; --------------> 1                    0 1 2 3 4      so here are 5 elements so n=5
for(i=0;i<n;i++)---> n+1
{                                                      here loop will be runned n+1 times as we'll only check 
S=S+A[i]; ---------> n(how many elemnts in array)       the condition in loop not inc/dec. or the initialization                                        
}                                                       
return s;----------> 1                                    SPACE
}                   ______                               A-->n(elements of array)    
                    f(n)=2n+3                            n-->1
     order time function/time complexicity is O(n)       s-->1
    is O(n) as here we have only one function n          i-->1
                                                         _______
                                                         S(n)=n+3 here order of space function/space complexicity
                                                             is O(n)









2.) Here we have to find sum of 2 matices (dimension n*n)

Algorithm add(A,B,n)                                                           SPACE
{                      TIME                                                   
for(i=0;i<n;i++)-------> n+1                                                   A--> n^2 (here A,B,C are matrices i.e. n*n)
{                                                                              B--> n^2            
for(j=0;j<n;j++)------->n(n+1)                                                 C--> n^2
{                                                                              n--> 1   (here n,i,j are variables)
C[i,j]=A[i,j]+B[i,j];-->n*n                                                    i--> 1
}                                                                              j--> 1
}                  _____________                                              __________
}                    f(n)=2n^2+2n+1---->Time complexicity or                 s(n)=3n^2+3----> Space function/Space complexcity
                                   degree of polynomial is O(n^2)                           is O(n^2)







3.)

Here we have to find multiplication of two matrices

Algorithm multiply(A,B,n)
                             TIME                              SPACE
{                            
for(i=0;i<n;i++)-------------->n+1                             A--> n^2      (as it is matrices 
{                                                              B--> n^2       hence order is n*n)
for(j=0;j<n;j++)-------------->n(n+1)                          C--> n^2
{                                                              n--> 1         (since these are variables)
 C[i,j]=0;-------------------->n*n                             i--> 1
for(k=0;k<n;k++)-------------->n*n(n+1)                        j--> 1
{                                                              k--> 1
 C[i,j]=A[i,j]*B[i,j];-------->n*n*n                           __________
}                            ________                          s(n)=3n^2+4      Space function/Space complexicity 
}                           f(n)=2n^3+3n^2+2n+1                                  is O(n^2)
}                  Time function/Time complexicity is               
                                O(n^3)
}




In an simple loop like:
for(i=o;i<n;i++)----n+1
{
stmt;---------------n
} 

we just need to  know how many time does a statement 
inside the loop run i.e.  n times  
so here we can also ignore the for loop and considser
the statement inside the loop.  

either the loop is running in decrementation  then also order will be O(n)


if the loop is incrementing by 2 i.e.

for(i=1;i<n;i=i+2)
{
statement;-----------n/2
                                                       

here the order O(n/2) as order will be divided by how many time 
the incrementation is done

either let it be i=i+20 then order will be O(n/20)



TO BE UNDERSTOOD...

let their be loop       how many times does i,j and loop runs

for(i=0;i<n;i++)                 I        J       NO.OF TIMES LOOP RUNS
{                          _________________________________________________          Then the order or degre will  
for(j=0;j<i;j++)                 0        -             0                              be:
{                         __________________________________________________             
statement;                       1        0             1                              1+2+3+......+n=n(n+1)/2
}                                         1 (loop 
                                             ends)                                           i.e. f(n)=n^2+n/2
}                         __________________________________________________
                                 2        0             2                                then Time Complexicity is
                                          1                                                O(n^2)
                                          2(loop 
                                             ends)
                           __________________________________________________
                                  3       0              3
                                          1
                                          2
                                          3(loop ends)
                          ___________________________________________________
                          .........and so on upto n times 



    
ANOTHER ONE:                          i          P
                                     _____________________
p=0;                                  
for(i=1;p<=n;i++)                      1        0+1
{                                      2       0+1+2
p=p+i;                                 3      0+1+2+3
}                                      4     0+1+2+3+4
                                       .         .
                                       .         .
here we dont know what                                       .         .
N                                       and so on upto k as we dont know upto what it runs
so we assume it will run 
                                       K     1+2+3+4+....+K
upto when p>n then condition will 
 stop.
. .
 .  p=k(k+1)/2
                  since,  k(k+1)/2 > n
                          
                  then k^2 > n   
                       
                        k >root of n                  Then time complexicity if O(root of n)






  


 

 
 









